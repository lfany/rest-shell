apply plugin: "java"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "application"

// Library versions
ext {
  slf4jVersion = "1.7.21"
  logbackVersion = "1.1.7"

  springVersion = "4.3.3.RELEASE"
  springShellVersion = "1.2.0.RELEASE"
  hateoasVersion = "0.21.0.RELEASE"
  jacksonVersion = "1.9.13"

  junitVersion = "4.12"

  commonCodecVersion = "1.10"
  hamcrestLibraryVersion = "1.4-atlassian-1"
}

installDist {
  into "build/install/rest-shell-$version"
}

group = "org.springframework.data.rest.shell"
mainClassName = "org.springframework.shell.Bootstrap"

// Build Configuration
configurations.all {
  exclude group: "commons-logging"
  //exclude module: "slf4j-log4j12"
}
configurations {
  compile.extendsFrom providedCompile
}
[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none"]
project.sourceCompatibility = 1.6
project.targetCompatibility = 1.6

// Repositories
repositories {
  //maven { url "http://repo.springsource.org/libs-snapshot" }
  //maven { url "http://repo.springsource.org/libs-milestone" }
  maven { url "http://repo.springsource.org/libs-release" }
  maven { url "http://spring-roo-repository.springsource.org/release" }
  mavenLocal()
}

// Artifact Configuration
javadoc {
  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
  options.author = true
  options.header = name
  //options.overview = "${projectDir}/src/main/java/overview.html"
}
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allJava
}
task javadocJar(type: Jar) {
  classifier = "javadoc"
  from javadoc
}
artifacts {
  archives sourcesJar
  archives javadocJar
}

// Dependencies
dependencies {

  // Logging
  compile "org.slf4j:slf4j-api:$slf4jVersion"
  runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
  runtime "ch.qos.logback:logback-classic:$logbackVersion"

  // Spring
  compile("org.springframework:spring-aop:$springVersion") { force = true }
  compile("org.springframework:spring-beans:$springVersion") { force = true }
  compile("org.springframework:spring-context:$springVersion") { force = true }
  compile("org.springframework:spring-context-support:$springVersion") { force = true }
  compile("org.springframework:spring-core:$springVersion") { force = true }
  compile("org.springframework:spring-web:$springVersion") { force = true }
  compile("org.springframework:spring-webmvc:$springVersion") { force = true }

  // Spring HATEOAS
  compile "org.springframework.hateoas:spring-hateoas:$hateoasVersion"

  // Spring Shell
  compile "org.springframework.shell:spring-shell:$springShellVersion"

  // Jackson JSON
  compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"

  // Commons
  compile "commons-codec:commons-codec:$commonCodecVersion"
  // TODO Add multipart upload support
  //compile "commons-fileupload:commons-fileupload:1.2.2"

  // Testing
  testCompile "junit:junit:$junitVersion"
  testCompile "org.hamcrest:hamcrest-library:$hamcrestLibraryVersion"
  testCompile("org.springframework:spring-test:$springVersion") { force = true }
  testRuntime("org.springframework:spring-context-support:$springVersion") { force = true }
}

// Gradle Wrapper
task wrapper(type: Wrapper) { gradleVersion = "3.1" }

task shell(type: JavaExec) {
  classpath = configurations.runtime
  main = "org.springframework.shell.Bootstrap"
}

// IDEA project configuration
idea {
  module {
    downloadJavadoc = false
    downloadSources = true
  }
  project {
    languageLevel = "1.6"
    ipr {
      withXml { xml ->
        xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping.@vcs = "Git"
        xml.node.component.find { it.@name == "ProjectRootManager" }.output.@url = "file://\$PROJECT_DIR\$/build"
      }
    }
  }
}
